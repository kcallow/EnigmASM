%define RADIX 8

%macro	toDigit	1
	sub	%1, '0'
%endmacro

%macro	toChar	1
	add	%1, '0'
%endmacro

%macro	atoi	2
	mov	rcx, %2
	mov	r8, RADIX
	xor	rax,rax
	xor	rbx,rbx
	xor	rdx,rdx

%%atoiLoop:
	mov	bl, [%1 + rdx]
	toDigit	bl
	add	rax, rbx
	push	rdx
	mul	r8		;Multiply by RADIX
	pop	rdx
	inc	rdx		;Next digit
	loop	%%atoiLoop

	shr	rax, 3
%endmacro

%macro	itoa	2
	push	%2
	mov	rax, %2
	mov	rcx, RADIX

	xor	rbx,rbx

%%itoaLoop:
	xor	rdx,rdx
	idiv	rcx
	toChar	rdx
	mov	[%1 + rbx], dl

	inc	rbx
	cmp	rax, 0
	jne	%%itoaLoop

	pop	%2
%endmacro

%macro	reverse	2
	mov	rcx, %2
	xor	rdx,rdx
%%revLoop:
	mov	al, [%1 + rcx - 1]
	mov	bl, [%1 + rdx]
	mov	[%1 + rcx - 1], bl
	mov	[%1 + rdx], al

	inc	rdx
	dec	rcx
	cmp	rdx, %2/2
	jnz	%%revLoop
%endmacro
