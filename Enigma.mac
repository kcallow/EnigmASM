%define LETTERS 26

struc Rotor
	.shift		resb LETTERS
	.rotation	resb 1
endstruc

;Getters:
%define shift(r, i) byte [r + Rotor.shift + i]
%define rotation(r) byte [r + Rotor.rotation]

;Constructor
%macro	newRotor 2
istruc Rotor
	at Rotor.shift, db %1
	at Rotor.rotation, db %2
iend
%endmacro

%macro printRotor 1
	xor rax,rax
	mov al, rotation(%1)
	mov rcx, LETTERS
%%loop
	cmp al, LETTERS
	jne %%skip
	sub al, LETTERS
%%skip
	lea rsi, [rax + %1]
	push rax
	push rcx
	putchar rsi
	pop rcx
	pop rax
	inc rax
	loop %%loop
%endmacro

%macro letterToCode 1
	sub %1, 'A'
%endmacro

%macro codeToLetter 1
	add %1, 'A'
%endmacro

%macro isupper 1
	cmp %1, 'A'
	jl %%end
	cmp %1, 'Z'
	jg %%end
	cmp rax,rax	;Set ZF
%%end
%endmacro

%macro getLetterShift 2
	xor rax, rax
	mov al, [%1]
	isupper	al
	jne %%end
	letterToCode al
	add al, rotation(%2)
	cmp al, LETTERS
	jl %%skip
	sub al, LETTERS
%%skip:
	mov al, shift(%2,rax)
	mov [%1], al
%%end
%endmacro

%macro getShiftIndex 2
	xor rax,rax
	mov bl, [%1]
%%loop:
	cmp shift(%2,rax), bl
	je %%end
	inc rax
	cmp rax, LETTERS
	jne %%loop
%%end
%endmacro

%macro getLetterFromShift 2
	getShiftIndex %1, %2
	cmp rax, LETTERS
	je %%end
	codeToLetter al
	sub al, rotation(%2)
	cmp al, 'A'
	jge %%skip
	add rax, LETTERS
%%skip
	mov [%1], al
%%end
%endmacro

%macro encryptLetter 6
	getLetterShift %1, %6
	printLetter
	getLetterShift %1, %5
	printLetter
	getLetterShift %1, %4
	printLetter
	getLetterShift %1, %3
	printLetter
	getLetterShift %1, %2
	printLetter
	getLetterFromShift %1, %3
	printLetter
	getLetterFromShift %1, %4
	printLetter
	getLetterFromShift %1, %5
	printLetter
	getLetterFromShift %1, %6
	printLetter
%endmacro

%macro printLetter 0
	push rax
	push r11
	mov [tempChr], al
	putstring arrow
	putchar tempChr
	pop r11
	pop rax
%endmacro

%macro handleRotations 3
	inc rotation(%3)
	cmp rotation(%3), LETTERS
	jne %%skip0
	mov rotation(%3), 0
	inc rotation(%2)
%%skip0:
	cmp rotation(%2), LETTERS
	jne %%skip1
	mov rotation(%2), 0
	inc rotation(%1)
%%skip1:
	cmp rotation(%1), LETTERS
	jne %%end
	mov rotation(%1), 0
%%end
%endmacro

section .data
arrow	db " -> ",0
tempChr	db 0
